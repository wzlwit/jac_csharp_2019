CLASS 5 TASKS
=============

TASK 1: Airports
----------------

Create a project Day05AirportTravel.

In the main directory of the project, using Notepad create file "airports.txt" which will contain lines such as:

YUL;Montreal;45.4697842;-73.7554174
YYZ;Toronto;43.6777215;-79.6270084
JFK;New York JFK;40.6413151;-73.7803278,17
;;;

(Add at least 3 more lines)

Create a class Airport initially like this:

class Airport {
	String Code, City;
	double Latitude, Longitude;
}

Add a suitable constructor, getters and setters that ensure that:
- code is always 3 upper-case letters (please use Regular Expression here)
- city is not empty string,
- latitude and longitude are within the correct ranges.

Setters must throw a custom exception InvalidDataException with one constructor InvalidDataException(String msg).

When your program starts you will read file "airports.txt" instantiate objects type Airport for each of lines in it and add them to

If any line has invalid format or data in it then inform user and continue parsing the next line.

static List<Airport> airportList = new List<Airport>();


Display the following menu to the user:

1. Show all airports (codes and city names)
2. Find distance between two airports by codes.
3. Find the airports nearest to an airport given by code and display the distance.
4. Add a new airport to the list.
0. Exit.

On Exit your program must write back an updated list of airports to "airports.txt" file.

Suggestion: make a copy of "airports.txt" file just in case you lost data when overriding.

Regarding menu item #2 and #3 - search online for a formula in C# code that computes distance between two points based on their latitude and longitude. You ARE ALLOWED to copy that method code directly into your solution.

Implement the functionality listed in the menu.

For a good quality solution you MUST decompose your task into methods in the main class, just like we did it in previous examples.

You must use proper error handling, exception propagation, problem decomposition, self-documenting code, etc.



TASK 2: ManyPeople
------------------

*** PART 1

Create a new project Day05ManyPeople.
Copy 3 classes Person, Student, Teacher from a previous project.

In the main directory of your project, using Notepad create file "people.txt" with the following contents:

Person;Jerry;23
Teacher;Randy;66;PhysEd;33
Person;Timmy;44
Student;Mary;34;Nursing;3.8
Student;Martin;31;Math;4.0
Teacher;Larry;51;Physics;22

In the Main() method of your program write code that will read this file line by line and will instantiate the correct class and add it to List

static List<Person> people = new List<Person>();

If you encounter a line that does not conform to requirements then warn user, ignore it and continue to next line.

Once all lines have been parsed and added to "people" list execute a for loop that will display all data for each element of the list, for example:

Student Mary is 34 studying Nursing with GPA 4.1

You must use ToString() implementation in each class to provide string to display.


*** PART 2:

Place several lines invalid in different ways in your input file to test your program. Make sure it skips all the invalid lines and does not crash.

Examples of invalid lines
Person;Jerry;;
Person;Jim;2342;
Car;BMW;55

Student;;;;


*** PART 3:

Add another 3 loops to Main method.
1. The first loop will print a list of only Students.
2. The second loop will print out a list of only Teachers.
Hint: use 'is' operator (similar to 'instanceof' you know from Java)

3. The third loop will print out a list of only Persons (but NOT Students and NOT Teachers!) - suggest you use GetType() and/or 'typeof' for comparison





