QUIZ 3 EF + Delegates + Indexer
===============================

Create Console project Quiz3Multi. Add Entity Framework via NuGet.

Create the following entities, add necessary access modifiers, accessors, annotations, etc:

class Airport {
	int Id;
	string Code; // 3 uppercase letters
	string City; // 0-50 letters
	ICollection<Flight> FlightsList;
}

class Flight {
	int Id;
	string Number; // two letters followed by two or three digits, e.g. UA234	
	Airport FromAirport;
	Airport ToAirport;
}

class LogMessage {
	int Id;
	DateTime Timestamp;
	string Msg;
}

Create class AirTravelContext inheriting from DbContext as you've done before to contain DbSets of the above entities.

Your program will implement the following menu options:

1. Add airport
2. Register a flight from/to airports
3. Show all flights involving a specific airport (from or to) by airport code
4. Delete an airport and all flights associated with it
5. Display Nth SuperFib number
6. Change exception handlers delegates
0. Exit

When processing user inputs you should ensure valid inputs (string length, content using regexps, etc.) and handle exceptions that may arise (file, database, parsing).


5. Display Nth SuperFib number
------------------------------

Let's define a new type of SuperFib number as follows:
0 => 0
1 => 1
2 => 1
3 => sum of the previous 3 numbers 0+1+1 => 2
4 => sum of the previous 3 numbers 1+1+2 => 4
5 => sum of the previous 3 numbers 1+2+4 => 7
6 => sum of the previous 3 numbers 2+4+7 => 13
...

Your job is to define a class SuperFibStore with indexer that returns Nth super-fib number.

To obtain full marks, however, you must *cache* (remember) numbers that have already been generated so that you never generate the same number twice during single execution of the program. That means that cache is held in memory.
Suggested data structures you may use: List, HashSet, Dictionary, SortedDictionary.

In indexer if negative N is provided you must throw an exception (and log it using Logger).

In this menu item you will simply ask user for N and then display the Nth super-fib in response:

Which super-fib would you like to see? 6
Super-fib is 13


6. Change exception handlers delegates
--------------------------------------

In the main Program.cs create and implement the following 3 methods:

public static void LogToScreen(string msg) { ... }
// display exception or other error message to the screen

public static void LogToFile(string msg) {... }
// save (append) exception or other error message to file @"..\..\..\main.log"
// Note: Every line in file must be preceded by a timestamp, e.g.
2019-05-09 09:06:52 Exception: unable to connect to database

public static void LogToDatabase(string msg) { ... }
// save exception or other error message to database using LogMessage and EntityFramework

You will have to create as appropriate:
a) delegate type
b) public static field named Logger that can be used by all parts of your program

You will use call to Logger to handle all errors and exceptions throughout your entire program. You can call it via Program.Logger() from other classes.

When menu item 6 is selected you will ask the user as follows:

Which loggers would you like to enable? Specify comma-separated list, empty for none:
1. to console / screen
2. to file
3. to database
Your choices: 1,3
Logger enabled: 1 - to console
Logger enabled: 3 - to database

Note: When program starts all 3 loggers must be enabled.

As always, for full marks you must apply best practices you've learned about in class.

Submission:
1. Close VisualStudio.
2. Copy your database file from your home directory to main directory of your Solution/Project.
3. ZIP-up your entire Solution/Project and upload to LEA.
Note: because of EntityFramework your zip file will be several MB in size and it may take a longer time to upload to LEA. Be patient and don't interrupt the upload until complete.

